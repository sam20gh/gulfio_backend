openapi: 3.1.0
info:
  title: MENA News API
  description: API for MENA News application providing articles, user management, recommendations, and more
  version: 1.0.0
  contact:
    name: API Support
    email: support@menaeapp.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://your-backend-url.com/api
    description: Production server
  - url: http://localhost:5000/api
    description: Local development server

paths:
  /health:
    get:
      tags:
        - System
      summary: Health check endpoint
      description: Returns the health status of the API
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time

  /db-test:
    get:
      tags:
        - System
      summary: Database connectivity test
      description: Tests MongoDB connection and returns article count
      responses:
        '200':
          description: Database is connected
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: db-connected
                  articleCount:
                    type: integer
                    example: 1500
                  readyState:
                    type: integer
                    example: 1
                  timestamp:
                    type: string
                    format: date-time
        '503':
          description: Database not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /articles:
    get:
      tags:
        - Articles
      summary: Get articles
      description: Retrieve articles with optional filtering and pagination
      parameters:
        - name: category
          in: query
          description: Filter articles by category
          required: false
          schema:
            type: string
            enum: [sports, politics, business, technology, health, entertainment]
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of articles per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: personalized
          in: query
          description: Get personalized recommendations
          required: false
          schema:
            type: boolean
            default: false
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Articles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  metadata:
                    type: object
                    properties:
                      totalArticles:
                        type: integer
                      category:
                        type: string
                      isPersonalized:
                        type: boolean
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /articles/{id}:
    get:
      tags:
        - Articles
      summary: Get article by ID
      description: Retrieve a specific article by its ID
      parameters:
        - name: id
          in: path
          description: Article ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Article retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '404':
          description: Article not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Articles
      summary: Update article
      description: Update an existing article (admin only)
      parameters:
        - name: id
          in: path
          description: Article ID
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleInput'
      responses:
        '200':
          description: Article updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Article not found

  /articles/{id}/like:
    post:
      tags:
        - Articles
      summary: Like an article
      description: Like or unlike an article
      parameters:
        - name: id
          in: path
          description: Article ID
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Article like status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  liked:
                    type: boolean
                  likeCount:
                    type: integer
        '401':
          description: Unauthorized
        '404':
          description: Article not found

  /articles/{id}/dislike:
    post:
      tags:
        - Articles
      summary: Dislike an article
      description: Dislike or remove dislike from an article
      parameters:
        - name: id
          in: path
          description: Article ID
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Article dislike status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  disliked:
                    type: boolean
                  dislikeCount:
                    type: integer

  /users/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                name:
                  type: string
                  minLength: 2
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '400':
          description: Invalid input or user already exists

  /users/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '401':
          description: Invalid credentials

  /users/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Retrieve current user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

    put:
      tags:
        - Users
      summary: Update user profile
      description: Update current user's profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                preferences:
                  type: object
                  properties:
                    categories:
                      type: array
                      items:
                        type: string
                    language:
                      type: string
                      enum: [en, ar]
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /recommendations:
    get:
      tags:
        - Recommendations
      summary: Get personalized recommendations
      description: Retrieve personalized article recommendations for the user
      parameters:
        - name: limit
          in: query
          description: Number of recommendations to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
        - name: category
          in: query
          description: Filter recommendations by category
          required: false
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Recommendations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  recommendations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                  algorithm:
                    type: string
                    description: Algorithm used for recommendations
                  generatedAt:
                    type: string
                    format: date-time

  /videos:
    get:
      tags:
        - Videos
      summary: Get videos
      description: Retrieve videos with pagination
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
      responses:
        '200':
          description: Videos retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  videos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Video'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /comments:
    get:
      tags:
        - Comments
      summary: Get comments for an article
      description: Retrieve comments for a specific article
      parameters:
        - name: articleId
          in: query
          description: Article ID to get comments for
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Comments
      summary: Create a comment
      description: Add a new comment to an article
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - articleId
                - content
              properties:
                articleId:
                  type: string
                content:
                  type: string
                  minLength: 1
                  maxLength: 1000
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /lotto:
    get:
      tags:
        - Lotto
      summary: Get latest lotto results
      description: Retrieve the most recent lottery results
      responses:
        '200':
          description: Lotto results retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LottoResult'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Article:
      type: object
      properties:
        _id:
          type: string
          description: Unique article identifier
        title:
          type: string
          description: Article title
        content:
          type: string
          description: Article content
        url:
          type: string
          format: uri
          description: Original article URL
        category:
          type: string
          enum: [sports, politics, business, technology, health, entertainment]
          description: Article category
        publishedAt:
          type: string
          format: date-time
          description: Publication date and time
        image:
          type: array
          items:
            type: string
            format: uri
          description: Array of image URLs
        viewCount:
          type: integer
          minimum: 0
          description: Number of views
        likes:
          type: integer
          minimum: 0
          description: Number of likes
        dislikes:
          type: integer
          minimum: 0
          description: Number of dislikes
        likedBy:
          type: array
          items:
            type: string
          description: Array of user IDs who liked the article
        dislikedBy:
          type: array
          items:
            type: string
          description: Array of user IDs who disliked the article
        source:
          type: string
          description: Article source name
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ArticleInput:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        content:
          type: string
          minLength: 1
        url:
          type: string
          format: uri
        category:
          type: string
          enum: [sports, politics, business, technology, health, entertainment]
        image:
          type: array
          items:
            type: string
            format: uri

    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        preferences:
          type: object
          properties:
            categories:
              type: array
              items:
                type: string
            language:
              type: string
              enum: [en, ar]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Video:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        url:
          type: string
          format: uri
        thumbnailUrl:
          type: string
          format: uri
        duration:
          type: integer
          description: Video duration in seconds
        viewCount:
          type: integer
          minimum: 0
        category:
          type: string
        createdAt:
          type: string
          format: date-time

    Comment:
      type: object
      properties:
        _id:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/User'
        articleId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    LottoResult:
      type: object
      properties:
        _id:
          type: string
        drawDate:
          type: string
          format: date
        numbers:
          type: array
          items:
            type: integer
        jackpot:
          type: number
          description: Jackpot amount
        winners:
          type: integer
          description: Number of winners
        createdAt:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
        totalPages:
          type: integer
        totalItems:
          type: integer
        itemsPerPage:
          type: integer
        hasNextPage:
          type: boolean
        hasPrevPage:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        message:
          type: string
          description: Detailed error description
        code:
          type: string
          description: Error code
        timestamp:
          type: string
          format: date-time

tags:
  - name: System
    description: System health and status endpoints
  - name: Articles
    description: Article management and retrieval
  - name: Authentication
    description: User authentication endpoints
  - name: Users
    description: User management
  - name: Recommendations
    description: Personalized content recommendations
  - name: Videos
    description: Video content management
  - name: Comments
    description: Article comments management
  - name: Lotto
    description: Lottery results
